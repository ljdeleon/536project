% Read Data from CSV File
filename = '/Users/luisdeleon/Desktop/Term project data 1b (1).csv';
data = readtable(filename);
tic 
% Extract order data
order_weight = data.Weight_lbs_;  
order_volume = data.Volume_in3_; 
order_pallets = data.Pallets; 

% Constants for container capacities
max_weight = 45000; % Weight capacity of a container in lbs
max_volume = 3600 * 1728; % Volume capacity of a container in cubic inches
max_pallets = 60; % Pallet capacity of a container

% Step 1: Greedy Packing - Initial Solution
remaining_orders = 1:length(order_weight); % List of order indices
containers = {}; % Cell array to store orders assigned to each container
container_count = 0;

while ~isempty(remaining_orders)
    container_weight = 0;
    container_volume = 0;
    container_pallets = 0;
    current_container = []; % Orders in the current container

    % Greedy packing: add orders to the container as long as constraints are met
    for i = length(remaining_orders):-1:1
        order = remaining_orders(i);
        if (container_weight + order_weight(order) <= max_weight) && ...
           (container_volume + order_volume(order) <= max_volume) && ...
           (container_pallets + order_pallets(order) <= max_pallets)
            % Add order to the current container
            container_weight = container_weight + order_weight(order);
            container_volume = container_volume + order_volume(order);
            container_pallets = container_pallets + order_pallets(order);
            current_container = [current_container, order]; % Append order
            remaining_orders(i) = []; % Remove order from remaining
        end
    end
    
    % Add current container to the list of containers
    containers{end+1} = current_container; 
    container_count = container_count + 1; % Increment container count
end

% Step 2: Simplex Refinement - Optimization
optimized_containers = containers; % Start with the current container assignments

for j = 1:container_count
    % Get orders in the current container
    orders = containers{j};
    
    % If there are no orders in the container, skip to the next one
    if isempty(orders)
        continue;
    end
    
    % Define the LP problem
    % Objective: Maximize the number of orders packed into the container
    f = -ones(length(orders), 1); % Minimize the negative of the number of orders (equivalent to maximizing packed orders)
    
    % Constraints
    A = [
        order_weight(orders)';
        order_volume(orders)';
        order_pallets(orders)'
    ];
    b = [max_weight; max_volume; max_pallets];
    Aeq = [];
    beq = [];
    lb = zeros(length(orders), 1); % Orders are binary (selected or not)
    ub = ones(length(orders), 1); % Binary decision
    intcon = 1:length(orders); % Decision variables are integers (binary)
    
    % Solve the optimization problem using intlinprog
    options = optimoptions('intlinprog', 'Display', 'off');
    [x, ~] = intlinprog(f, intcon, A, b, Aeq, beq, lb, ub, options);
    
    % Update container assignments
    optimized_orders = orders(logical(round(x))); % Only include selected orders
    optimized_containers{j} = optimized_orders; 
end

% Display the final optimized result
disp(['Optimal number of containers to be shipped per day: ', num2str(length(optimized_containers))]);

% Iterate through each container and display its content
for j = 1:length(optimized_containers)
    orders_in_container = optimized_containers{j};
    
    if isempty(orders_in_container)
        disp(['Container ', num2str(j), ' contains no orders.']);
    else
        disp(['Container ', num2str(j), ' contains orders: ', num2str(orders_in_container)]);
    end
end
toc
